# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Plants_analytics
                                 A QGIS plugin
 Plants_analytics
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-04
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Eugene Luchshev
        email                : dragonborn7243@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from builtins import object
from qgis.PyQt.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtGui import QIcon
from qgis.core import *
from qgis.core import QgsApplication, QgsVectorLayer, QgsRasterLayer, QgsProject, QgsWkbTypes, QgsDataProvider
from qgis.utils import iface
import qgis.utils
# Initialize Qt resources from file resources.py
from . import resources_rc
# Import the code for the dialog
from .Plants_analytics_dialog import Plants_analyticsDialog
import os.path



class Plants_analytics:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Plants_analytics_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Plants_analytics')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Plants_analytics', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Plants_analytics/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Plants_analytics'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Plants_analytics'),
                action)
            self.iface.removeToolBarIcon(action)

    def download_Climate_data(self):
        if (self.dlg.checkBox.isChecked()):
            path_to_tif = "D:/!Education/2 course/2 sem/Modules/AVG_temp.tif" #path to TIF files
            rlayer = QgsRasterLayer(path_to_tif, "SRTM layer name") #Creating raster layer in program
            iface.addRasterLayer(path_to_tif, "AVG_temp") #add TIF file to layer
        if (self.dlg.checkBox_2.isChecked()):
            path_to_tif = "D:/!Education/2 course/2 sem/Modules/S_Rad.tif"
            rlayer = QgsRasterLayer(path_to_tif, "SRTM layer name")
            iface.addRasterLayer(path_to_tif, "S_Rad")
        if (self.dlg.checkBox_3.isChecked()):
            path_to_tif = "D:/!Education/2 course/2 sem/Modules/water_vapor.tif"
            rlayer = QgsRasterLayer(path_to_tif, "SRTM layer name")
            iface.addRasterLayer(path_to_tif, "water_vapor")
        if (self.dlg.checkBox_4.isChecked()):
            path_to_tif = "D:/!Education/2 course/2 sem/Modules/Precipitation.tif"
            rlayer = QgsRasterLayer(path_to_tif, "SRTM layer name")
            iface.addRasterLayer(path_to_tif, "Precipitation")
        if (self.dlg.checkBox_5.isChecked()):
            path_to_tif = "D:/!Education/2 course/2 sem/Modules/Wind_speed.tif"
            rlayer = QgsRasterLayer(path_to_tif, "SRTM layer name")
            iface.addRasterLayer(path_to_tif, "Wind_speed")
            if not rlayer.isValid():
                print("Layer failed to load!")

    def forecast_map(self):
        shapefile = 'D:/!!!Python education/populus_pamirica.shp' #path to shape
        layer = QgsVectorLayer(shapefile) #creating vector layer
        it = layer.getFeatures() #getting features from vector layer
        t_min = 0
        t_max = 0
        wv_min = 0
        wv_max = 0
        sr_min = 0
        sr_max = 0
        p_min = 0
        p_max = 0
        ws_min = 0
        ws_max = 0
        path_to_temperature = "D:/!Education/2 course/2 sem/Modules/AVG_temp.tif"
        path_to_sun_rad = "D:/!Education/2 course/2 sem/Modules/S_Rad.tif"
        path_to_water_vapor = "D:/!Education/2 course/2 sem/Modules/water_vapor.tif"
        path_to_precipitation = "D:/!Education/2 course/2 sem/Modules/Precipitation.tif"
        path_to_wind_speed = "D:/!Education/2 course/2 sem/Modules/Wind_speed.tif"
        path_to_clipped_AVG_temp = "D:/!Education/2 course/2 sem/Modules/Clipped_AVG_temp.tif"
        avg_temp = QgsRasterLayer(path_to_temperature, "SRTM layer name")
        sun_rad = QgsRasterLayer(path_to_sun_rad, "SRTM layer name")
        wat_vap = QgsRasterLayer(path_to_water_vapor, "SRTM layer name")
        prec = QgsRasterLayer(path_to_precipitation, "SRTM layer name")
        wind_speed = QgsRasterLayer(path_to_wind_speed, "SRTM layer name")
        clipped_AVG = QgsRasterLayer(path_to_clipped_AVG_temp, "SRTM layer name")
        '''calculation of geometry features'''
        for feature in it:
            geom = feature.geometry()
            geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
            coordinate = geom.centroid().asPoint()
            x_coord = coordinate[0]
            y_coord = coordinate[1]
            '''calculation of minimal and maximal counts of geography and climatic indicators'''
            val, res = avg_temp.dataProvider().sample(QgsPointXY(x_coord, y_coord), 1)
            if val < t_min:
                t_min = val
            if val > t_max:
                t_max = val


            val, res = wind_speed.dataProvider().sample(QgsPointXY(x_coord, y_coord), 1)
            if val < ws_min:
                ws_min = val
            if val > ws_max:
                ws_max = val


            val, res = sun_rad.dataProvider().sample(QgsPointXY(x_coord, y_coord), 1)
            if val < sr_min:
                sr_min = val
            if val > sr_max:
                sr_max = val

            val, res = prec.dataProvider().sample(QgsPointXY(x_coord, y_coord), 1)
            if val < p_min:
                p_min = val
            if val > p_max:
                p_max = val


            val, res = wat_vap.dataProvider().sample(QgsPointXY(x_coord, y_coord), 1)
            if val < wv_min:
                wv_min = val
            if val > wv_max:
                wv_max = val
        '''checking counts of indicators from python console in QGIS'''
        QgsMessageLog.logMessage(str(t_min) + " " + str(t_max), 'Plants_analytics', level=Qgis.Info)
        QgsMessageLog.logMessage(str(ws_min) + " " + str(ws_max), 'Plants_analytics', level=Qgis.Info)
        QgsMessageLog.logMessage(str(sr_min) + " " + str(sr_max), 'Plants_analytics', level=Qgis.Info)
        QgsMessageLog.logMessage(str(p_min) + " " + str(p_max), 'Plants_analytics', level=Qgis.Info)
        QgsMessageLog.logMessage(str(wv_min) + " " + str(wv_max), 'Plants_analytics', level=Qgis.Info)

        def pixel2coord(x, y):

            pixelWidth = clipped_AVG.rasterUnitsPerPixelX()
            pixelHeight = clipped_AVG.rasterUnitsPerPixelY()
            xp = (pixelWidth * x) + originx + (pixelWidth / 2)
            yp = (pixelHeight * y) + originy + (pixelHeight / 2)
            return QgsPointXY(xp, yp)
        layer = QgsVectorLayer('Point?crs=epsg:4326', 'point', 'memory')
            # Set the provider to accept the data source
        prov = layer.dataProvider()
        src_cols = clipped_AVG.width() #cut raster
        src_rows = clipped_AVG.height()
        ext = clipped_AVG.extent()
        originx = ext.xMinimum()
        originy = ext.yMinimum()
        str_out = ""
        '''nested function to iterate over values and create a vector layer with points in the range calculated earlier'''
        for i in range(0, src_cols):
            for j in range(0, src_rows):
                rspnt = pixel2coord(i, j)
                val, res = avg_temp.dataProvider().sample(rspnt, 1)
                #if i<10:
                #    str_out = str_out + str(t_min) + " " + str(t_max) + " " + str(val) + " " + str(rspnt.x()) + " " + str(rspnt.y())+"\n"
                if val > t_min and val < t_max:
                    #QgsMessageLog.logMessage(str(t_min) + " " + str(t_max)+" "+str(val)+" "+str(rspnt.x)+" "+str(rspnt.y), 'Plants_analytics', level=Qgis.Info)
                    val, res = wind_speed.dataProvider().sample(rspnt, 1)
                    if i < 1:
                        str_out = str_out + str(ws_min) + " " + str(ws_max) + " " + str(val) + " " + str(rspnt.x()) + " " + str(rspnt.y()) + "\n"
                    if val > ws_min and val < ws_max:
                        val, res = sun_rad.dataProvider().sample(rspnt, 1)
                        if val > sr_min and val < sr_max:
                            val, res = prec.dataProvider().sample(rspnt, 1)
                            if val > p_min and val < p_max:
                                val, res = wat_vap.dataProvider().sample(rspnt, 1)
                                if val > wv_min and val < wv_max:
                                    point = rspnt
                # Add a new feature and assign the geometry
                                    feat = QgsFeature()
                                    feat.setGeometry(QgsGeometry.fromPointXY(point))
                                    prov.addFeatures([feat])
            # Add the layer to the Layers panel
            '''checking recorded values in points'''
        with open("D:/!Education/2 course/2 sem/Modules/test.txt", 'w') as f:
             f.write(str_out)
             f.close()
        QgsProject.instance().addMapLayers([layer])
        layer.updateExtents()
    def run(self):
        """Run method that performs all the real work"""



        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Plants_analyticsDialog()
        self.dlg.loadButton.clicked.connect(Plants_analyticsDialog.load_occurrences)
        # show the dialog
        self.dlg.Load_rasterButton.clicked.connect(self.download_Climate_data)
        self.dlg.Forecast_Button.clicked.connect(self.forecast_map)
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            pass
